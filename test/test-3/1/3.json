{
  "messages": [
    {
      "role": "system",
      "content": "You are an AI programming assistant.
When asked for your name, you must respond with \"GitHub Copilot\".
Follow the user's requirements carefully & to the letter.
Follow Microsoft content policies.
Avoid content that violates copyrights.
If you are asked to generate content that is harmful, hateful, racist, sexist, lewd, violent, or completely irrelevant to software engineering, only respond with \"Sorry, I can't assist with that.\"
Keep your answers short and impersonal.
<instructions>
You are a highly sophisticated automated coding agent with expert-level knowledge across many different programming languages and frameworks.
The user will ask a question, or ask you to perform a task, and it may require lots of research to answer correctly. There is a selection of tools that let you perform actions or retrieve helpful context to answer the user's question.
If you can infer the project type (languages, frameworks, and libraries) from the user's query or the context that you have, make sure to keep them in mind when making changes.
If the user wants you to implement a feature and they have not specified the files to edit, first break down the user's request into smaller concepts and think about the kinds of files you need to grasp each concept.
If you aren't sure which tool is relevant, you can call multiple tools. You can call tools repeatedly to take actions or gather as much context as needed until you have completed the task fully. Don't give up unless you are sure the request cannot be fulfilled with the tools you have. It's YOUR RESPONSIBILITY to make sure that you have done all you can to collect necessary context.
Prefer using the semantic_search tool to search for context unless you know the exact string or filename pattern you're searching for.
Don't make assumptions about the situation- gather context first, then perform the task or answer the question.
Think creatively and explore the workspace in order to make a complete fix.
Don't repeat yourself after a tool call, pick up where you left off.
NEVER print out a codeblock with file changes unless the user asked for it. Use the edit_file tool instead.
NEVER print out a codeblock with a terminal command to run unless the user asked for it. Use the run_in_terminal tool instead.
You don't need to read a file if it's already provided in context.
</instructions>
<toolUseInstructions>
When using a tool, follow the json schema very carefully and make sure to include ALL required properties.
Always output valid JSON when using a tool.
If a tool exists to do a task, use the tool instead of asking the user to manually take an action.
If you say that you will take an action, then go ahead and use the tool to do it. No need to ask permission.
Never use multi_tool_use.parallel or any tool that does not exist. Use tools using the proper procedure, DO NOT write out a json codeblock with the tool inputs.
Never say the name of a tool to a user.
If you think running multiple tools can answer the user's question, prefer calling them in parallel whenever possible, but do not call semantic_search in parallel.
If semantic_search returns the full contents of the text files in the workspace, you have all the workspace context.
Don't call the run_in_terminal tool multiple times in parallel. Instead, run one command and wait for the output before running the next command.
After you have performed the user's task, if the user corrected something you did, expressed a coding preference, or communicated a fact that you need to remember, use the updateUserPreferences tool to save their preferences.

</toolUseInstructions>
<editFileInstructions>
Don't try to edit an existing file without reading it first, so you can make changes properly.
Use the edit_file tool to edit files. When editing files, group your changes by file.
NEVER show the changes to the user, just call the tool, and the edits will be applied and shown to the user.
NEVER print a codeblock that represents a change to a file, use edit_file instead.
For each file, give a short description of what needs to be changed, then use the edit_file tool. You can use any tool multiple times in a response, and you can keep writing text after using a tool.
Follow best practices when editing files. If a popular external library exists to solve a problem, use it and properly install the package e.g. with \"npm install\" or creating a \"requirements.txt\".
After editing a file, you MUST call get_errors to validate the change. Fix the errors if they are relevant to your change or the prompt, and remember to validate that they were actually fixed.
The edit_file tool is very smart and can understand how to apply your edits to their files, you just need to provide minimal hints.
Avoid repeating existing code, instead use comments to represent regions of unchanged code. The tool prefers that you are as concise as possible. For example:
// ...existing code...
changed code
// ...existing code...
changed code
// ...existing code...

Here is an example of how you should format an edit to an existing Person class:
class Person {
  // {EXISTING_CODE_MARKER}
  age: number;
  // {EXISTING_CODE_MARKER}
  getAge() {
    return this.age;
  }
}
</editFileInstructions>"
    },
    {
      "role": "user",
      "content": "<context>
My current OS is: Windows
I am working in a workspace with the following folders:
- c:\\projects\\eventostec-backend
I am working in a workspace that has the following structure:
```
docker-compose.yml
Dockerfile
mvnw
mvnw.cmd
pom.xml
README.md
src/
  main/
    java/
      com/
        eventostec/
          api/
            ApiApplication.java
            config/
              ...
            controller/
            domain/
            exceptions/
            mappers/
            repositories/
            service/
            utils/
    resources/
      application.properties
      db/
        migration/
          V1__create-event-table.sql
          V2__create-table-coupon.sql
          V3__create-table-address.sql
          V4__alter-table-event.sql
          V5__clear-prod-db.sql
          V6__alter-table-event.sql
  test/
    java/
      com/
        eventostec/
          api/
            ApiApplicationTests.java
            controller/
            service/
    resources/
      application-test.properties
target/
  classes/
    application.properties
    com/
      eventostec/
        api/
          ApiApplication.class
          config/
            AWSConfig.class
            CorsConfig.class
          controller/
            CouponController.class
            EventController.class
          domain/
            address/
            coupon/
            event/
          exceptions/
            config/
          mappers/
            EventMapper.class
            EventMapperImpl.class
          repositories/
            AddressRepository.class
            CouponRepository.class
            EventRepository.class
          service/
            AddressService.class
            CouponService.class
            EventService.class
          utils/
            ExceptionUtil.class
    db/
      migration/
        V1__create-event-table.sql
        V2__create-table-coupon.sql
        V3__create-table-address.sql
        V4__alter-table-event.sql
        V5__clear-prod-db.sql
        V6__alter-table-event.sql
  generated-sources/
    annotations/
      com/
        eventostec/
          api/
            mappers/
  generated-test-sources/
    test-annotations/
  maven-status/
    maven-compiler-plugin/
      compile/
        default-compile/
          createdFiles.lst
          inputFiles.lst
  test-classes/
    application-test.properties
    com/
      eventostec/
        api/
          ApiApplicationTests.class
          controller/
            CouponControllerTest.class
            EventControllerTest.class
          service/
            AddressServiceTest.class
            ...
```
This view of the workspace structure may be truncated. You can use tools to collect more context if needed.
</context>
<file>
```java
// filepath: c:\\projects\\eventostec-backend\\src\\main\\java\\com\\eventostec\\api\\utils\\ExceptionUtil.java
package com.eventostec.api.utils;\r
\r
import com.eventostec.api.exceptions.config.ProblemDetails;\r
import jakarta.servlet.http.HttpServletRequest;\r
import org.springframework.core.convert.ConversionFailedException;\r
import org.springframework.http.HttpStatus;\r
import org.springframework.validation.FieldError;\r
import org.springframework.web.bind.MethodArgumentNotValidException;\r
import org.springframework.web.bind.MissingServletRequestParameterException;\r
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\r
\r
import java.util.Optional;\r
\r
public final class ExceptionUtil {\r
\r
    public static final String TIPO_DESCONHECIDO = \"tipo desconhecido\";\r
    public static final String VALOR_NAO_INFORMADO = \"valor nÃ£o informado\";\r
\r
    private ExceptionUtil() {\r
        throw new IllegalStateException(\"Cannot be instantiated\");\r
    }\r
\r
    public static ProblemDetails getProblemDetails(HttpServletRequest request, Exception ex) {\r
        return switch (ex.getClass().getSimpleName()) {\r
            case \"MethodArgumentTypeMismatchException\" -> handleMethodArgumentTypeMismatch((MethodArgumentTypeMismatchException) ex, request);\r
            case \"MissingServletRequestParameterException\" ->\r
                    handleMissingServletRequestParameter((MissingServletRequestParameterException) ex, request);\r
            case \"DataIntegrityViolationException\" -> handleDataIntegrityViolation(request);\r
            case \"MethodArgumentNotValidException\" -> handleMethodArgumentNotValid((MethodArgumentNotValidException) ex, request);\r
            case \"ConversionFailedException\" -> handleConversionFailed((ConversionFailedException) ex, request);\r
            default -> new ProblemDetails(\r
                    \"Erro nÃ£o especificado\",\r
                    HttpStatus.BAD_REQUEST.value(),\r
                    HttpStatus.BAD_REQUEST.getReasonPhrase(),\r
                    \"Ocorreu um erro inesperado.\",\r
                    request.getRequestURI()\r
            );\r
        };\r
    }\r
\r
    private static ProblemDetails handleMethodArgumentTypeMismatch(MethodArgumentTypeMismatchException ex, HttpServletRequest request) {\r
        String title = \"Campo invÃ¡lido informado\";\r
        String fieldName = ex.getName();\r
        String requiredType = Optional.ofNullable(ex.getRequiredType())\r
                .map(Class::getSimpleName)\r
                .orElse(TIPO_DESCONHECIDO);\r
        String invalidValue = Optional.ofNullable(ex.getValue())\r
                .map(Object::toString)\r
                .orElse(VALOR_NAO_INFORMADO);\r
        String detail = String.format(\"O campo '%s' recebeu um valor invÃ¡lido: '%s'. Esperava-se um valor do tipo '%s'.\", fieldName, invalidValue, requiredType);\r
\r
        return new ProblemDetails(title, HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), detail, request.getRequestURI());\r
    }\r
\r
    private static ProblemDetails handleMissingServletRequestParameter(MissingServletRequestParameterException ex, HttpServletRequest request) {\r
        String title = \"Campo nÃ£o informado\";\r
        String detail = String.format(\"O dado do campo '%s' nÃ£o foi informado.\", ex.getParameterName());\r
\r
        return new ProblemDetails(title, HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), detail, request.getRequestURI());\r
    }\r
\r
    private static ProblemDetails handleDataIntegrityViolation(HttpServletRequest request) {\r
        String title = \"ViolaÃ§Ã£o de integridade de campo\";\r
        String detail = \"ViolaÃ§Ã£o de integridade detectada no banco de dados.\";\r
\r
        return new ProblemDetails(title, HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), detail, request.getRequestURI());\r
    }\r
\r
    private static ProblemDetails handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpServletRequest request) {\r
        String title = \"ValidaÃ§Ã£o de campo violada\";\r
        String failedValidationMessage = \"A validaÃ§Ã£o falhou em um campo nÃ£o identificado.\";\r
        String detail;\r
\r
        if (ex.getBindingResult().hasFieldErrors()) {\r
            FieldError fieldError = ex.getBindingResult().getFieldError();\r
            if (fieldError != null) {\r
                String violatedField = fieldError.getField();\r
                String errorMessage = fieldError.getDefaultMessage();\r
\r
                if (errorMessage != null && errorMessage.contains(\"Failed to convert value of type\")) {\r
                    String rejectedValue = Optional.ofNullable(fieldError.getRejectedValue())\r
                            .map(Object::toString)\r
                            .orElse(VALOR_NAO_INFORMADO);\r
                    errorMessage = String.format(\"'%s' nÃ£o Ã© vÃ¡lido.\", rejectedValue);\r
                }\r
\r
                detail = String.format(\"A validaÃ§Ã£o do campo '%s' falhou: %s.\", violatedField, errorMessage);\r
            } else {\r
                detail = failedValidationMessage;\r
            }\r
        } else {\r
            detail = failedValidationMessage;\r
        }\r
\r
        return new ProblemDetails(title, HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), detail, request.getRequestURI());\r
    }\r
\r
    private static ProblemDetails handleConversionFailed(ConversionFailedException ex, HttpServletRequest request) {\r
        String title = \"Campo invÃ¡lido informado\";\r
        String invalidValue = Optional.ofNullable(ex.getValue())\r
                .map(Object::toString)\r
                .orElse(VALOR_NAO_INFORMADO);\r
        String requiredType = Optional.of(ex.getTargetType())\r
                .map(typeDescriptor -> typeDescriptor.getType().getSimpleName())\r
                .orElse(TIPO_DESCONHECIDO);\r
        String detail = String.format(\"O valor '%s' fornecido Ã© invÃ¡lido. Esperava-se um valor do tipo '%s'.\", invalidValue, requiredType);\r
\r
        return new ProblemDetails(title, HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), detail, request.getRequestURI());\r
    }\r
}
```
</file>

<reminder>
When using the edit_file tool, avoid repeating existing code, instead use a line comment with `...existing code...` to represent regions of unchanged code.
</reminder>
<prompt>
You are an Azure Java Migration AI Assistant specializing in cloud platform transition, you are responsible to change the code in the project to Azure following below steps\r
1) Check the dependencies definition in current project (pom.xml or gradle setting) if any dependencies is not supported in azure, if not, replace Azure SDK equivalents. Please be awared to add the Azure SDK with the same framework. for example, if the code before change use spring, the added Azure SDK equivalents need use the spring.\r
2) Change the Java code to used the azure SDK equivalents.\r
3) Check the configuration to adapt the azure sdk equivalents.\r
4) Check the changed file and Get any compile or lint errors, if there is any error, fix it
</prompt>"
    },
    {
      "role": "assistant",
      "content": "",
      "tool_calls": [
        {
          "function": {
            "name": "file_search",
            "arguments": "{\"query\":\"pom.xml\"}"
          },
          "id": "call_fuE9Gqmo0vh6yJx1VBtu4EJd",
          "type": "function"
        }
      ]
    },
    {
      "role": "tool",
      "content": "1 total results
c:\\projects\\eventostec-backend\\pom.xml",
      "tool_call_id": "call_fuE9Gqmo0vh6yJx1VBtu4EJd"
    },
    {
      "role": "assistant",
      "content": "",
      "tool_calls": [
        {
          "function": {
            "name": "read_file",
            "arguments": "{\"filePath\":\"c:\\\\projects\\\\eventostec-backend\\\\pom.xml\",\"startLineNumberBaseZero\":0,\"endLineNumberBaseZero\":50}"
          },
          "id": "call_RGHQZplq9qJKFrLR3FAXrPH6",
          "type": "function"
        }
      ]
    },
    {
      "role": "tool",
      "content": "```
// filepath: c:\\projects\\eventostec-backend\\pom.xml
<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r
<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r
     xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r
  <modelVersion>4.0.0</modelVersion>\r
  <parent>\r
    <groupId>org.springframework.boot</groupId>\r
    <artifactId>spring-boot-starter-parent</artifactId>\r
    <version>3.3.4</version>\r
    <relativePath/>\r
  </parent>\r
  <groupId>com.eventostec</groupId>\r
  <artifactId>api</artifactId>\r
  <version>0.0.1-SNAPSHOT</version>\r
  <name>api</name>\r
  <description>Backend for eventos tec</description>\r
  <properties>\r
    <java.version>21</java.version>\r
    <mapstruct.version>1.4.2.Final</mapstruct.version>\r
    <mapstruct-lombok.version>0.2.0</mapstruct-lombok.version>\r
  </properties>\r
  <dependencies>\r
    <dependency>\r
      <groupId>org.springframework.boot</groupId>\r
      <artifactId>spring-boot-starter-data-jpa</artifactId>\r
    </dependency>\r
    <dependency>\r
      <groupId>org.springframework.boot</groupId>\r
      <artifactId>spring-boot-starter-web</artifactId>\r
    </dependency>\r
    <dependency>\r
      <groupId>org.springframework.boot</groupId>\r
      <artifactId>spring-boot-starter-validation</artifactId>\r
    </dependency>\r
    <dependency>\r
      <groupId>org.springframework.boot</groupId>\r
      <artifactId>spring-boot-devtools</artifactId>\r
      <scope>runtime</scope>\r
      <optional>true</optional>\r
    </dependency>\r
    <dependency>\r
      <groupId>org.postgresql</groupId>\r
      <artifactId>postgresql</artifactId>\r
      <scope>runtime</scope>\r
    </dependency>\r
    <dependency>\r
      <groupId>org.projectlombok</groupId>\r
      <artifactId>lombok</artifactId>\r
      <optional>true</optional>\r
    </dependency>\r
    <dependency>\r
      <groupId>org.springframework.boot</groupId>\r
      <artifactId>spring-boot-starter-test</artifactId>\r
      <scope>test</scope>\r
    </dependency>\r
    <dependency>\r
      <groupId>org.flywaydb</groupId>\r
      <artifactId>flyway-core</artifactId>\r
      <version>9.8.1</version>\r
    </dependency>\r
    <dependency>\r
      <groupId>com.h2database</groupId>\r
      <artifactId>h2</artifactId>\r
      <scope>test</scope>\r
    </dependency>\r
    <dependency>\r
      <groupId>org.mockito</groupId>\r
      <artifactId>mockito-core</artifactId>\r
      <scope>test</scope>\r
    </dependency>\r
    <dependency>\r
      <groupId>org.mockito</groupId>\r
      <artifactId>mockito-junit-jupiter</artifactId>\r
      <scope>test</scope>\r
    </dependency>\r
    <dependency>\r
      <groupId>software.amazon.awssdk</groupId>\r
      <artifactId>s3</artifactId>\r
      <version>2.26.7</version>\r
    </dependency>\r
    <dependency>\r
      <groupId>org.mapstruct</groupId>\r
      <artifactId>mapstruct</artifactId>\r
      <version>${mapstruct.version}</version>\r
    </dependency>\r
  </dependencies>\r
\r
  <build>\r
    <plugins>\r
      <plugin>\r
        <groupId>org.apache.maven.plugins</groupId>\r
        <artifactId>maven-compiler-plugin</artifactId>\r
        <version>3.13.0</version>\r
        <configuration>\r
          <source>21</source>\r
          <target>21</target>\r
          <annotationProcessorPaths>\r
            <path>\r
              <groupId>org.mapstruct</groupId>\r
              <artifactId>mapstruct-processor</artifactId>\r
              <version>${mapstruct.version}</version>\r
            </path>\r
          </annotationProcessorPaths>\r
        </configuration>\r
      </plugin>\r
      <plugin>\r
        <groupId>org.springframework.boot</groupId>\r
        <artifactId>spring-boot-maven-plugin</artifactId>\r
        <configuration>\r
          <excludes>\r
            <exclude>\r
              <groupId>org.projectlombok</groupId>\r
              <artifactId>lombok</artifactId>\r
            </exclude>\r
          </excludes>\r
        </configuration>\r
      </plugin>\r
      <plugin>\r
        <groupId>org.jacoco</groupId>\r
        <artifactId>jacoco-maven-plugin</artifactId>\r
        <version>0.8.11</version>\r
        <executions>\r
          <execution>\r
            <goals>\r
              <goal>prepare-agent</goal>\r
            </goals>\r
          </execution>\r
          <execution>\r
            <id>report</id>\r
            <phase>verify</phase>\r
            <goals>\r
              <goal>report</goal>\r
            </goals>\r
          </execution>\r
        </executions>\r
        <configuration>\r
          <outputDirectory>${project.build.directory}/site/jacoco</outputDirectory>\r
        </configuration>\r
      </plugin>\r
    </plugins>\r
  </build>\r
</project>
```",
      "tool_call_id": "call_RGHQZplq9qJKFrLR3FAXrPH6"
    },
    {
      "role": "assistant",
      "content": "The `pom.xml` file includes dependencies for Spring Boot, PostgreSQL, Flyway, H2, Mockito, and AWS SDK for S3. To migrate to Azure, we need to replace the AWS SDK with the Azure SDK equivalents.

### Steps to Migrate to Azure:

1. **Replace AWS SDK with Azure SDK:**
   - Remove the AWS SDK dependency.
   - Add Azure Storage SDK dependency.

2. **Update Java Code:**
   - Modify the code to use Azure Storage SDK instead of AWS S3.

3. **Update Configuration:**
   - Update the configuration files to include Azure Storage settings.

Let's start by updating the `pom.xml` file to replace the AWS SDK with the Azure Storage SDK.

### Update `pom.xml`:

We will remove the AWS SDK dependency and add the Azure Storage SDK dependency.

I'll make these changes now.",
      "tool_calls": [
        {
          "function": {
            "name": "edit_file",
            "arguments": "{\"code\":\"<dependency>\
\  <groupId>com.azure</groupId>\
\  <artifactId>azure-storage-blob-spring-boot-starter</artifactId>\
\  <version>12.14.0</version>\
</dependency>\
<!-- Removed AWS SDK dependency -->\",\"explanation\":\"Replace AWS SDK with Azure Storage SDK in pom.xml\",\"filePath\":\"c:\\\\projects\\\\eventostec-backend\\\\pom.xml\"}"
          },
          "id": "call_7OVudH3NmHm7np0Us8eNG9fn",
          "type": "function"
        }
      ]
    },
    {
      "role": "tool",
      "content": "The file was edited successfully",
      "tool_call_id": "call_7OVudH3NmHm7np0Us8eNG9fn"
    },
    {
      "role": "assistant",
      "content": "Next, we need to update the Java code to use the Azure Storage SDK instead of the AWS S3 SDK. Let's identify the parts of the code that interact with AWS S3 and modify them to use Azure Storage.

I'll search for references to `software.amazon.awssdk.s3` in the codebase to locate the relevant code.",
      "tool_calls": [
        {
          "function": {
            "name": "grep_search",
            "arguments": "{\"query\":\"software.amazon.awssdk.s3\",\"includePattern\":\"**/*.java\"}"
          },
          "id": "call_0H4vthQtzIcklCWSMqjzdVi8",
          "type": "function"
        }
      ]
    },
    {
      "role": "tool",
      "content": "No matches found",
      "tool_call_id": "call_0H4vthQtzIcklCWSMqjzdVi8"
    },
    {
      "role": "user",
      "content": "Above is the result of calling one or more tools. The user can see the results of the edit_file tool, so you don't need to explain them. But the user can't see the results of other tools, so you should explain them to the user if referencing them in your answer. Continue from where you left off without repeating yourself."
    }
  ],
  "model": "gpt-4o",
  "temperature": 0,
  "top_p": 1,
  "max_tokens": 4096,
  "tools": [
    {
      "function": {
        "name": "semantic_search",
        "description": "Run a natural language search for relevant code or documentation comments from the user's current workspace. Returns relevant code snippets from the user's current workspace if it is large, or the full contents of the workspace if it is small.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The query to search the codebase for. Should contain all relevant context. Should ideally be text that might appear in the codebase, such as function names, variable names, or comments."
            }
          },
          "required": ["query"]
        }
      },
      "type": "function"
    },
    {
      "function": {
        "name": "file_search",
        "description": "Search for files in the workspace by glob pattern. This only returns the paths of matching files. Limited to 20 results. Glob patterns match from the root of the workspace folder. Examples: **/*.{js,ts} to match all js/ts files in the workspace. src/** to match all files under the top-level src folder. Use this tool when you know the exact filename pattern of the files you're searching for.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "Search for files with names or paths matching this query. Can be a glob pattern."
            }
          },
          "required": ["query"]
        }
      },
      "type": "function"
    },
    {
      "function": {
        "name": "grep_search",
        "description": "Do a text search in the workspace. Limited to 20 results. Use this tool when you know the exact string you're searching for.",
        "parameters": {
          "type": "object",
          "properties": {
            "query": {
              "type": "string",
              "description": "The pattern to search for in files in the workspace. Can be a regex or plain text pattern"
            },
            "isRegexp": {
              "type": "boolean",
              "description": "Whether the pattern is a regex. False by default."
            },
            "includePattern": {
              "type": "string",
              "description": "Search files matching this glob pattern. Will be applied to the relative path of files within the workspace."
            }
          },
          "required": ["query"]
        }
      },
      "type": "function"
    },
    {
      "function": {
        "name": "read_file",
        "description": "Read the contents of a file.

You must specify the line range you're interested in, and if the file is larger, you will be given an outline of the rest of the file. If the file contents returned are insufficient for your task, you may call this tool again to retrieve more content.",
        "parameters": {
          "type": "object",
          "properties": {
            "filePath": {
              "description": "The absolute paths of the files to read.",
              "type": "string"
            },
            "startLineNumberBaseZero": {
              "type": "number",
              "description": "The line number to start reading from, 0-based."
            },
            "endLineNumberBaseZero": {
              "type": "number",
              "description": "The inclusive line number to end reading at, 0-based."
            }
          },
          "required": [
            "filePath",
            "startLineNumberBaseZero",
            "endLineNumberBaseZero"
          ]
        }
      },
      "type": "function"
    },
    {
      "function": {
        "name": "list_dir",
        "description": "List the contents of a directory. Result will have the name of the child. If the name ends in /, it's a folder, otherwise a file",
        "parameters": {
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The absolute path to the directory to list."
            }
          },
          "required": ["path"]
        }
      },
      "type": "function"
    },
    {
      "function": {
        "name": "run_in_terminal",
        "description": "Run a shell command in a terminal. State is persistent across command calls. Use this instead of printing a shell codeblock and asking the user to run it. If the command is a long-running background process, you MUST pass isBackground=true. Background terminals will return a terminal ID which you can use to check the output of a background process with get_terminal_output.",
        "parameters": {
          "type": "object",
          "properties": {
            "command": {
              "type": "string",
              "description": "The command to run in the terminal."
            },
            "explanation": {
              "type": "string",
              "description": "A one-sentence description of what the command does. This will be shown to the user before the command is run."
            },
            "isBackground": {
              "type": "boolean",
              "description": "Whether the command starts a background process. If true, the command will run in the background and you will not see the output. If false, the tool call will block on the command finishing, and then you will get the output. Examples of backgrond processes: building in watch mode, starting a server. You can check the output of a backgrond process later on by using get_terminal_output."
            }
          },
          "required": ["command", "explanation", "isBackground"]
        }
      },
      "type": "function"
    },
    {
      "function": {
        "name": "get_terminal_output",
        "description": "Get the output of a terminal command previous started with run_in_terminal",
        "parameters": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "The ID of the terminal command output to check."
            }
          },
          "required": ["id"]
        }
      },
      "type": "function"
    },
    {
      "function": {
        "name": "get_errors",
        "description": "Get any compile or lint errors in a code file. If the user mentions errors or problems in a file, they may be referring to these. Use the tool to see the same errors that the user is seeing. Also use this tool after editing a file to validate the change.",
        "parameters": {
          "type": "object",
          "properties": {
            "filePaths": { "type": "array", "items": { "type": "string" } }
          },
          "required": ["filePaths"]
        }
      },
      "type": "function"
    },
    {
      "function": {
        "name": "get_changed_files",
        "description": "Get git diffs of file changes in the workspace.",
        "parameters": {
          "type": "object",
          "properties": {
            "workspacePaths": {
              "type": "array",
              "items": { "type": "string" },
              "description": "The absolute path(s) to workspace folder(s) to look for changes in."
            },
            "sourceControlState": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["staged", "unstaged", "merge-conflicts"]
              },
              "description": "The kinds of git state to filter by. Allowed values are: 'staged', 'unstaged', and 'merge-conflicts'. If not provided, all states will be included."
            }
          },
          "required": ["workspacePaths"]
        }
      },
      "type": "function"
    },
    {
      "function": {
        "name": "test_failure",
        "description": "Includes test failure information in the prompt."
      },
      "type": "function"
    },
    {
      "function": {
        "name": "run_tests",
        "description": "Runs tests in workspace.",
        "parameters": {
          "type": "object",
          "properties": {
            "filter": {
              "type": "string",
              "description": "Specifies which tests to run, either
- `all` to run all tests
- `failed` to run failed tests
- `last` to re-run the last set of tests",
              "enum": ["all", "failed", "last"]
            }
          },
          "required": ["filter"]
        }
      },
      "type": "function"
    },
    {
      "function": {
        "name": "get_new_workspace_guidelines",
        "description": "Get a list of guidelines to follow to help the user get started with a new workspace in VS Code"
      },
      "type": "function"
    },
    {
      "function": {
        "name": "get_new_workspace_creation_command",
        "description": "Get a command to run in the terminal to scaffold a new workspace for the given workspace type. Do not use this tool if you have not called the get_new_workspace_guidelines tool first.",
        "parameters": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Specifies the name of the workspace to create."
            }
          },
          "required": ["name"]
        }
      },
      "type": "function"
    },
    {
      "function": {
        "name": "edit_file",
        "description": "Edit a file in the workspace. Use this tool once per file that needs to be modified, even if there are multiple changes for a file. Generate the \"explanation\" property first. 
The user is very smart and can understand how to apply your edits to their files, you just need to provide minimal hints.
Avoid repeating existing code, instead use comments to represent regions of unchanged code. The user prefers that you are as concise as possible. For example:
// ...existing code...
{ changed code }
// ...existing code...
{ changed code }
// ...existing code...

Here is an example of how you should use format an edit to an existing Person class:
class Person {
  // ...existing code...
  age: number;
  // ...existing code...
  getAge() {
    return this.age;
  }
}
",
        "parameters": {
          "type": "object",
          "properties": {
            "explanation": {
              "type": "string",
              "description": "A short explanation of the edit being made. Can be the same as the explanation you showed to the user."
            },
            "filePath": {
              "type": "string",
              "description": "An absolute path to the file to edit, or the URI of a untitled, not yet named, file, such as `untitled:Untitled-1."
            },
            "code": {
              "type": "string",
              "description": "The code change to apply to the file. 
The user is very smart and can understand how to apply your edits to their files, you just need to provide minimal hints.
Avoid repeating existing code, instead use comments to represent regions of unchanged code. The user prefers that you are as concise as possible. For example:
// ...existing code...
{ changed code }
// ...existing code...
{ changed code }
// ...existing code...

Here is an example of how you should use format an edit to an existing Person class:
class Person {
  // ...existing code...
  age: number;
  // ...existing code...
  getAge() {
    return this.age;
  }
}
"
            }
          },
          "required": ["explanation", "filePath", "code"]
        }
      },
      "type": "function"
    }
  ],
  "n": 1,
  "stream": true
}
