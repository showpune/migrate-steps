Here is a potentially relevant text excerpt in `mvnw` starting at line 99:
```
...
# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS=\"=\" read -r key value; do
  case \"${key-}\" in
  distributionUrl) distributionUrl=\"${value-}\" ;;
  distributionSha256Sum) distributionSha256Sum=\"${value-}\" ;;
  esac
done <\"${0%/*}/.mvn/wrapper/maven-wrapper.properties\"
[ -n \"${distributionUrl-}\" ] || die \"cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties\"

case \"${distributionUrl##*/}\" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case \"${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)\" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
...
```

Here is a potentially relevant text excerpt in `.mvn/wrapper/maven-wrapper.properties` starting at line 0:
```properties
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \"License\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.1
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.6/apache-maven-3.9.6-bin.zip
```

Here is a potentially relevant text excerpt in `mvnw.cmd` starting at line 141:
```cmd
...
  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
  catch { Write-Warning \"Cannot remove $TMP_DOWNLOAD_DIR\" }
}

Write-Output \"MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD\"
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 0:
```
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \"License\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.1
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
...
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 184:
```
...
elif [ -z \"${MVNW_USERNAME-}\" ] && command -v curl >/dev/null; then
  verbose \"Found curl ... using curl\"
  curl ${__MVNW_QUIET_CURL:+\"$__MVNW_QUIET_CURL\"} -f -L -o \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" \"$distributionUrl\" || die \"curl: Failed to fetch $distributionUrl\"
elif set_java_home; then
  verbose \"Falling back to use Java to download\"
  javaSource=\"$TMP_DOWNLOAD_DIR/Downloader.java\"
  targetZip=\"$TMP_DOWNLOAD_DIR/$distributionUrlName\"
  cat >\"$javaSource\" <<-END
    public class Downloader extends java.net.Authenticator
    {
      protected java.net.PasswordAuthentication getPasswordAuthentication()
      {
        return new java.net.PasswordAuthentication( System.getenv( \"MVNW_USERNAME\" ), System.getenv( \"MVNW_PASSWORD\" ).toCharArray() );
      }
      public static void main( String[] args ) throws Exception
      {
        setDefault( new Downloader() );
...
```

Here is a potentially relevant text excerpt in `pom.xml` starting at line 17:
```xml
...
        <mapstruct.version>1.4.2.Final</mapstruct.version>
        <mapstruct-lombok.version>0.2.0</mapstruct-lombok.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
...
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 129:
```
...
[ -z \"${MVNW_REPOURL-}\" ] || distributionUrl=\"$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*\"$_MVNW_REPO_PATTERN\"}\"
distributionUrlName=\"${distributionUrl##*/}\"
distributionUrlNameMain=\"${distributionUrlName%.*}\"
distributionUrlNameMain=\"${distributionUrlNameMain%-bin}\"
MAVEN_HOME=\"$HOME/.m2/wrapper/dists/${distributionUrlNameMain-}/$(hash_string \"$distributionUrl\")\"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec \"$MAVEN_HOME/bin/$MVN_CMD\" \"$@\" || die \"cannot exec $MAVEN_HOME/bin/$MVN_CMD\"
}

if [ -d \"$MAVEN_HOME\" ]; then
  verbose \"found existing MAVEN_HOME at $MAVEN_HOME\"
  exec_maven \"$@\"
fi

case \"${distributionUrl-}\" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
...
```

Here is a potentially relevant text excerpt in `pom.xml` starting at line 45:
```xml
...
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>9.8.1</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
...
```

Here is a potentially relevant text excerpt in `README.md` starting at line 0:
````md
# Etapas para o deploy

1. Buildando a imagem
```bash
docker build --platform linux/amd64 -t backend-eventostec:3.0 .
```

> Substituir o XX pela versão atual

2. Enviando para o Docker Hub
```bash
docker tag backend-eventostec:XX.0 kipperdev/backend-eventostec:XX.0
docker push kipperdev/backend-eventostec:XX.0
```

> Substituir o XX pela versão atual

3. Acessa máquina virtual

```bash
ssh ec2-user@44.212.51.2
```

4. Puxa e executa a imagem do Docker
```bash
docker pull kipperdev/backend-eventostec:XX.0
docker run -d -p 80:80 kipperdev/backend-eventostec:XX.0
```

> É importante mapear o Docker para a porta 80 da máquina virtual, pois é a porta que o LB está acessando.
````

Here is the full text of `Dockerfile`:
```
FROM maven:3.9.6-amazoncorretto-21-debian as build

COPY src /app/src
COPY pom.xml /app

WORKDIR /app
RUN mvn clean install

FROM amazoncorretto:21

ENV DB_URL=jdbc:postgresql://db-eventostec.cxaqsm4iiyjr.us-east-1.rds.amazonaws.com/postgres
ENV DB_USER=postgres
ENV DB_PASSWORD={DB_PASSWORD}
ENV ADMIN_KEY={ADMIN_KEY}
ENV AWS_REGION=us-east-1
ENV AWS_BUCKET_NAME=eventostec-imagens

COPY --from=build /app/target/api-0.0.1-SNAPSHOT.jar /app/app.jar

WORKDIR /app

EXPOSE 80

CMD [\"java\", \"-jar\", \"app.jar\"]
```

Here is a potentially relevant text excerpt in `pom.xml` starting at line 106:
```xml
...
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.11</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>report</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <outputDirectory>${project.build.directory}/site/jacoco</outputDirectory>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 201:
```
...
        java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
      }
    }
    END
  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
  verbose \" - Compiling Downloader.java ...\"
  \"$(native_path \"$JAVACCMD\")\" \"$(native_path \"$javaSource\")\" || die \"Failed to compile Downloader.java\"
  verbose \" - Running Downloader.java ...\"
  \"$(native_path \"$JAVACMD\")\" -cp \"$(native_path \"$TMP_DOWNLOAD_DIR\")\" Downloader \"$distributionUrl\" \"$(native_path \"$targetZip\")\"
fi

# If specified, validate the SHA-256 sum of the Maven distribution zip file
if [ -n \"${distributionSha256Sum-}\" ]; then
  distributionSha256Result=false
  if [ \"$MVN_CMD\" = mvnd.sh ]; then
    echo \"Checksum validation is not supported for maven-mvnd.\" >&2
...
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 114:
```
...
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo \"Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version\" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl=\"${distributionUrl%-bin.*}-$distributionPlatform.zip\"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD=\"mvn${0##*/mvnw}\" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
...
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 26:
```
...
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ \"${MVNW_VERBOSE-}\" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\\
 \"$1\"; }
case \"$(uname)\" in
CYGWIN* | MINGW*)
  [ -z \"${JAVA_HOME-}\" ] || JAVA_HOME=\"$(cygpath --unix \"$JAVA_HOME\")\"
  native_path() { cygpath --path --windows \"$1\"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n \"${JAVA_HOME-}\" ]; then
    if [ -x \"$JAVA_HOME/jre/sh/java\" ]; then
...
```

Here is a potentially relevant text excerpt in `mvnw.cmd` starting at line 54:
```cmd
...
if (!$distributionUrl) {
  Write-Error \"cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties\"
}

switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
  \"maven-mvnd-*\" {
    $USE_MVND = $true
    $distributionUrl = $distributionUrl -replace '-bin\\.[^.]*$',\"-windows-amd64.zip\"
    $MVN_CMD = \"mvnd.cmd\"
    break
  }
  default {
    $USE_MVND = $false
    $MVN_CMD = $script -replace '^mvnw','mvn'
    break
  }
}

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
if ($env:MVNW_REPOURL) {
...
```

Here is the full text of `target/classes/application.properties`:
```properties
spring.application.name=api
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost/eventostec}
spring.datasource.username=${DB_USER:admin}
spring.datasource.password=${DB_PASSWORD:admin}
aws.region=${AWS_REGION:us-east-1}
aws.bucket.name=${AWS_BUCKET_NAME:eventostec-imagens}
admin.key=${ADMIN_KEY:admin}
aws.accessKey=
aws.secretKey=
server.port=8090
```

Here is a potentially relevant text excerpt in `mvnw.cmd` starting at line 125:
```cmd
...
  Import-Module $PSHOME\\Modules\\Microsoft.PowerShell.Utility -Function Get-FileHash
  if ((Get-FileHash \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
    Write-Error \"Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property.\"
  }
}

# unzip and move
Expand-Archive \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -DestinationPath \"$TMP_DOWNLOAD_DIR\" | Out-Null
Rename-Item -Path \"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain\" -NewName $MAVEN_HOME_NAME | Out-Null
try {
  Move-Item -Path \"$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME\" -Destination $MAVEN_HOME_PARENT | Out-Null
} catch {
  if (! (Test-Path -Path \"$MAVEN_HOME\" -PathType Container)) {
    Write-Error \"fail to move MAVEN_HOME\"
  }
} finally {
...
```

Here is a potentially relevant text excerpt in `mvnw.cmd` starting at line 0:
```cmd
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM \"License\"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    https://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.1
@REM
@REM Optional ENV vars
...
```

Here is a potentially relevant text excerpt in `mvnw.cmd` starting at line 86:
```cmd
...
  Write-Output \"MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD\"
  exit $?
}

if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
  Write-Error \"distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl\"
}

# prepare tmp dir
$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path \"$TMP_DOWNLOAD_DIR_HOLDER.dir\"
$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
trap {
  if ($TMP_DOWNLOAD_DIR.Exists) {
    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
    catch { Write-Warning \"Cannot remove $TMP_DOWNLOAD_DIR\" }
  }
}

New-Item -Itemtype Directory -Path \"$MAVEN_HOME_PARENT\" -Force | Out-Null

# Download and Install Apache Maven
Write-Verbose \"Couldn't find MAVEN_HOME, downloading and installing it ...\"
Write-Verbose \"Downloading from: $distributionUrl\"
...
```

Here is the full text of `src/main/resources/application.properties`:
```properties
spring.application.name=api
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost/eventostec}
spring.datasource.username=${DB_USER:admin}
spring.datasource.password=${DB_PASSWORD:admin}
aws.region=${AWS_REGION:us-east-1}
aws.bucket.name=${AWS_BUCKET_NAME:eventostec-imagens}
admin.key=${ADMIN_KEY:admin}
aws.accessKey=
aws.secretKey=
server.port=8090
```

Here is a potentially relevant text excerpt in `mvnw.cmd` starting at line 35:
```cmd
...
  IF \"%%A\"==\"MVN_CMD\" (set __MVNW_CMD__=%%B) ELSE IF \"%%B\"==\"\" (echo %%A) ELSE (echo %%A=%%B)
)
@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
@SET __MVNW_PSMODULEP_SAVE=
@SET __MVNW_ARG0_NAME__=
@SET MVNW_USERNAME=
@SET MVNW_PASSWORD=
@IF NOT \"%__MVNW_CMD__%\"==\"\" (%__MVNW_CMD__% %*)
@echo Cannot start maven from wrapper >&2 && exit /b 1
@GOTO :EOF
: end batch / begin powershell #>

$ErrorActionPreference = \"Stop\"
if ($env:MVNW_VERBOSE -eq \"true\") {
  $VerbosePreference = \"Continue\"
}

# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
$distributionUrl = (Get-Content -Raw \"$scriptDir/.mvn/wrapper/maven-wrapper.properties\" | ConvertFrom-StringData).distributionUrl
...
```

Here is a potentially relevant text excerpt in `pom.xml` starting at line 74:
```xml
...
        <dependency>
            <groupId>software.amazon.awssdk</groupId>
            <artifactId>s3</artifactId>
            <version>2.26.7</version>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                    <annotationProcessorPaths>
                        <path>
                            <groupId>org.mapstruct</groupId>
                            <artifactId>mapstruct-processor</artifactId>
                            <version>${mapstruct.version}</version>
                        </path>
                    </annotationProcessorPaths>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
...
```

Here is a potentially relevant text excerpt in `target/maven-status/maven-compiler-plugin/compile/default-compile/inputFiles.lst` starting at line 0:
```lst
C:\\projects\\eventostec-backend\\src\\main\\java\\com\\eventostec\\api\\ApiApplication.java
C:\\projects\\eventostec-backend\\src\\main\\java\\com\\eventostec\\api\\config\\AWSConfig.java
C:\\projects\\eventostec-backend\\src\\main\\java\\com\\eventostec\\api\\config\\AzureStorageConfig.java
C:\\projects\\eventostec-backend\\src\\main\\java\\com\\eventostec\\api\\config\\CorsConfig.java
C:\\projects\\eventostec-backend\\src\\main\\java\\com\\eventostec\\api\\controller\\CouponController.java
C:\\projects\\eventostec-backend\\src\\main\\java\\com\\eventostec\\api\\controller\\EventController.java
C:\\projects\\eventostec-backend\\src\\main\\java\\com\\eventostec\\api\\domain\\address\\Address.java
...
```

Here is a potentially relevant text excerpt in `mvnw.cmd` starting at line 24:
```cmd
...
@REM   MVNW_REPOURL - repo url base for downloading maven distribution
@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
@REM ----------------------------------------------------------------------------

@IF \"%__MVNW_ARG0_NAME__%\"==\"\" (SET __MVNW_ARG0_NAME__=%~nx0)
@SET __MVNW_CMD__=
@SET __MVNW_ERROR__=
@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
@SET PSModulePath=
@FOR /F \"usebackq tokens=1* delims==\" %%A IN (`powershell -noprofile \"& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}\"`) DO @(
...
```

Here is a potentially relevant text excerpt in `mvnw.cmd` starting at line 75:
```cmd
...
  $MVNW_REPO_PATTERN = if ($USE_MVND) { \"/org/apache/maven/\" } else { \"/maven/mvnd/\" }
  $distributionUrl = \"$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')\"
}
$distributionUrlName = $distributionUrl -replace '^.*/',''
$distributionUrlNameMain = $distributionUrlName -replace '\\.[^.]*$','' -replace '-bin$',''
$MAVEN_HOME_PARENT = \"$HOME/.m2/wrapper/dists/$distributionUrlNameMain\"
$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString(\"x2\")}) -join ''
$MAVEN_HOME = \"$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME\"

if (Test-Path -Path \"$MAVEN_HOME\" -PathType Container) {
  Write-Verbose \"found existing MAVEN_HOME at $MAVEN_HOME\"
...
```

Here is a potentially relevant text excerpt in `mvnw.cmd` starting at line 110:
```cmd
...
Write-Verbose \"Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName\"

$webclient = New-Object System.Net.WebClient
if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
}
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$webclient.DownloadFile($distributionUrl, \"$TMP_DOWNLOAD_DIR/$distributionUrlName\") | Out-Null

# If specified, validate the SHA-256 sum of the Maven distribution zip file
$distributionSha256Sum = (Get-Content -Raw \"$scriptDir/.mvn/wrapper/maven-wrapper.properties\" | ConvertFrom-StringData).distributionSha256Sum
if ($distributionSha256Sum) {
  if ($USE_MVND) {
    Write-Error \"Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties.\"
  }
...
```

Here is the full text of `src/main/java/com/eventostec/api/config/AWSConfig.java`:
```java
package com.eventostec.api.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3ClientBuilder;

@Configuration
public class AWSConfig {
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/config/AWSConfig.java` starting at line 11:
```java
/*...*/
@Configuration
public class AWSConfig {

    @Value(\"${aws.region}\")
    private String awsRegion;
    @Value(\"${aws.accessKey:}\")
    private String accessKeyId;
    @Value(\"${aws.secretKey:}\")
    private String secretAccessKey;

    @Bean
    public S3Client createS3Instance() {
        S3ClientBuilder s3ClientBuilder = S3Client.builder()
                .region(Region.of(awsRegion));

        if (accessKeyId != null && !accessKeyId.isEmpty() &&
                secretAccessKey != null && !secretAccessKey.isEmpty()) {
            s3ClientBuilder.credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(accessKeyId, secretAccessKey)));
        }

        return s3ClientBuilder.build();
    }
}
```