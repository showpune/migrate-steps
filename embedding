 "Here is a potentially relevant text excerpt in `mvnw.cmd` starting at line 0:
```cmd
<# : batch portion
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements.  See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership.  The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM \"License\"); you may not use this file except in compliance
@REM with the License.  You may obtain a copy of the License at
@REM
@REM    https://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied.  See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Apache Maven Wrapper startup batch script, version 3.3.1
@REM
@REM Optional ENV vars
...
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/mappers/EventMapper.java` starting at line 34:
```java
/*...*/
@Mapper(componentModel = \"spring\")
public interface EventMapper {
    /*...*/
    @Named(\"epochToDate\")
    default Date epochToDate(Long timestamp) {
        return timestamp != null ? new Date(timestamp) : null;
    }

    @Named(\"dateToEpoch\")
    default Long dateToEpoch(Date date) {
        return date != null ? date.getTime() : null;
    }
}
```

Here is a potentially relevant text excerpt in `src/test/java/com/eventostec/api/service/EventServiceTest.java` starting at line 48:
```java
/*...*/
class EventServiceTest {
    /*...*/
    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        eventService = new EventService(s3Client, addressService, couponService, repository);
        // Configurando valores diretamente nos atributos usando ReflectionTestUtils
        ReflectionTestUtils.setField(eventService, \"adminKey\", adminKey);
        ReflectionTestUtils.setField(eventService, \"bucketName\", bucketName);
        // Mockando S3Utilities
        when(s3Client.utilities()).thenReturn(s3Utilities);
    }

    @Test
    void test_shouldSaveEvent() {
        EventRequestDTO requestDTO = new EventRequestDTO(\"Evento Teste\", \"Descrição do evento\", new Date().getTime(), \"Cidade Teste\", \"UF\", true, \"https://evento.com\", null);
        Event event = new Event();

        when(repository.save(any(Event.class))).thenReturn(event);

        Event savedEvent = eventService.createEvent(requestDTO);

        assertNotNull(savedEvent);
        verify(repository, times(1)).save(any(Event.class));
    }
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/resources/db/migration/V2__create-table-coupon.sql` starting at line 0:
```sql
CREATE TABLE coupon (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    code VARCHAR(100) NOT NULL,
    discount INTEGER NOT NULL,
    valid TIMESTAMP NOT NULL,
    event_id UUID,
    FOREIGN KEY (event_id) REFERENCES event(id) ON DELETE CASCADE
);
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 147:
```
...
*) die \"distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'\" ;;
esac

# prepare tmp dir
if TMP_DOWNLOAD_DIR=\"$(mktemp -d)\" && [ -d \"$TMP_DOWNLOAD_DIR\" ]; then
  clean() { rm -rf -- \"$TMP_DOWNLOAD_DIR\"; }
  trap clean HUP INT TERM EXIT
else
  die \"cannot create temp dir\"
fi

mkdir -p -- \"${MAVEN_HOME%/*}\"

# Download and Install Apache Maven
verbose \"Couldn't find MAVEN_HOME, downloading and installing it ...\"
verbose \"Downloading from: $distributionUrl\"
verbose \"Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName\"

# select .zip or .tar.gz
if ! command -v unzip >/dev/null; then
  distributionUrl=\"${distributionUrl%.zip}.tar.gz\"
  distributionUrlName=\"${distributionUrl##*/}\"
fi

# verbose opt
...
```

Here is a potentially relevant text excerpt in `src/test/java/com/eventostec/api/controller/EventControllerTest.java` starting at line 0:
```java
package com.eventostec.api.controller;

import com.eventostec.api.domain.event.Event;
import com.eventostec.api.domain.event.EventDetailsDTO;
import com.eventostec.api.domain.event.EventRequestDTO;
import com.eventostec.api.domain.event.EventResponseDTO;
import com.eventostec.api.service.EventService;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(EventController.class)
class EventControllerTest {
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/repositories/CouponRepository.java` starting at line 0:
```java
package com.eventostec.api.repositories;

import com.eventostec.api.domain.coupon.Coupon;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Date;
import java.util.List;
import java.util.UUID;

public interface CouponRepository extends JpaRepository <Coupon, UUID> {
    List<Coupon> findByEventIdAndValidAfter(UUID eventId, Date currentDate);
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/config/AWSConfig.java` starting at line 11:
```java
/*...*/
@Configuration
public class AWSConfig {

    @Value(\"${aws.region}\")
    private String awsRegion;
    @Value(\"${aws.accessKey:}\")
    private String accessKeyId;
    @Value(\"${aws.secretKey:}\")
    private String secretAccessKey;

    @Bean
    public S3Client createS3Instance() {
        S3ClientBuilder s3ClientBuilder = S3Client.builder()
                .region(Region.of(awsRegion));

        if (accessKeyId != null && !accessKeyId.isEmpty() &&
                secretAccessKey != null && !secretAccessKey.isEmpty()) {
            s3ClientBuilder.credentialsProvider(StaticCredentialsProvider.create(AwsBasicCredentials.create(accessKeyId, secretAccessKey)));
        }

        return s3ClientBuilder.build();
    }
}
```

Here is a potentially relevant text excerpt in `target/generated-sources/annotations/com/eventostec/api/mappers/EventMapperImpl.java` starting at line 58:
```java
/*...*/
@Generated(
    value = \"org.mapstruct.ap.MappingProcessor\",
    date = \"2025-02-18T16:36:11+0800\",
    comments = \"version: 1.4.2.Final, compiler: Eclipse JDT (IDE) 3.41.0.z20250115-2156, environment: Java 21.0.5 (Eclipse Adoptium)\"
)
@Component
public class EventMapperImpl implements EventMapper {
    /*...*/
    @Override
    public EventRequestDTO toDto(Event entity) {
        /*...*/
        MultipartFile image = null;

        EventRequestDTO eventRequestDTO = new EventRequestDTO( title, description, date, city, state, remote, eventUrl, image );

        return eventRequestDTO;
    }
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/domain/address/Address.java` starting at line 0:
```java
package com.eventostec.api.domain.address;

import com.eventostec.api.domain.event.Event;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.UUID;

@Table(name = \"address\")
@Entity
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class Address {
    @Id
    @GeneratedValue
    private UUID id;

    private String city;
    private String uf;

    @OneToOne
    @JoinColumn(name = \"event_id\")
    private Event event;
}
```

Here is a potentially relevant text excerpt in `target/generated-sources/annotations/com/eventostec/api/mappers/EventMapperImpl.java` starting at line 32:
```java
/*...*/
@Generated(
    value = \"org.mapstruct.ap.MappingProcessor\",
    date = \"2025-02-18T16:36:11+0800\",
    comments = \"version: 1.4.2.Final, compiler: Eclipse JDT (IDE) 3.41.0.z20250115-2156, environment: Java 21.0.5 (Eclipse Adoptium)\"
)
@Component
public class EventMapperImpl implements EventMapper {

    @Override
    public Event toEntity(EventRequestDTO dto, String imgUrl) {
        /*...*/
            event.setImgUrl( imgUrl );
        }

        return event;
    }
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/service/EventService.java` starting at line 180:
```java
/*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/service/EventService.java` starting at line 65:
```java
/*...*/
@Service
@Slf4j
@RequiredArgsConstructor
public class EventService {
    /*...*/
    public List<EventResponseDTO> getUpcomingEvents(int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<EventAddressProjection> eventsPage = this.repository.findUpcomingEvents(new Date(), pageable);
        return eventsPage.map(event -> new EventResponseDTO(
                        event.getId(),
                        event.getTitle(),
                        event.getDescription(),
                        event.getDate(),
                        event.getCity() != null ? event.getCity() : \"\",
                        event.getUf() != null ? event.getUf() : \"\",
                        event.getRemote(),
                        event.getEventUrl(),
                        event.getImgUrl())
                )
                .stream().toList();
    }
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/test/java/com/eventostec/api/ApiApplicationTests.java` starting at line 0:
```java
package com.eventostec.api;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

@SpringBootTest
@ActiveProfiles(\"test\")
class ApiApplicationTests {

\t@Test
\tvoid contextLoads() {
\t\t//Test the context application
\t}

}
```

Here is the full text of `target/classes/db/migration/V2__create-table-coupon.sql`:
```sql
CREATE TABLE coupon (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    code VARCHAR(100) NOT NULL,
    discount INTEGER NOT NULL,
    valid TIMESTAMP NOT NULL,
    event_id UUID,
    FOREIGN KEY (event_id) REFERENCES event(id) ON DELETE CASCADE
);
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/controller/CouponController.java` starting at line 0:
```java
package com.eventostec.api.controller;

import com.eventostec.api.domain.coupon.Coupon;
import com.eventostec.api.domain.coupon.CouponRequestDTO;
import com.eventostec.api.service.CouponService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@RequestMapping(\"/api/coupon\")
@RequiredArgsConstructor
public class CouponController {

    private final CouponService couponService;

    @PostMapping(\"/event/{eventId}\")
    public ResponseEntity<Coupon> addCouponsToEvent(@PathVariable UUID eventId, @RequestBody CouponRequestDTO data) {
        Coupon coupons = couponService.addCouponToEvent(eventId, data);
        return ResponseEntity.ok(coupons);
    }
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/controller/EventController.java` starting at line 22:
```java
/*...*/
@RestController
@RequiredArgsConstructor
@RequestMapping(\"/api/event\")
public class EventController {

    private final EventService eventService;

    @PostMapping(consumes = \"multipart/form-data\")
    public ResponseEntity<Event> create(@Valid @ModelAttribute EventRequestDTO eventRequestDTO) {
        /*...*/
    }

    @GetMapping(\"/{eventId}\")
    public ResponseEntity<EventDetailsDTO> getEventDetails(@PathVariable UUID eventId) {
        /*...*/
    }

    @GetMapping
    public ResponseEntity<List<EventResponseDTO>> getEvents(@RequestParam(defaultValue = \"0\") int page, @RequestParam(defaultValue = \"10\") int size){
        /*...*/
    }

    @GetMapping(\"/filter\")
    public ResponseEntity<List<EventResponseDTO>> getFilteredEvents(@RequestParam(defaultValue = \"0\") int page,
                                                                    @RequestParam(defaultValue = \"10\") int size,
                                                                    @RequestParam String city,
                                                                    @RequestParam String uf,
                                                                    @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) Date startDate,
                                                                    @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) Date endDate) {
        /*...*/
    }

    @GetMapping(\"/search\")
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/utils/ExceptionUtil.java` starting at line 15:
```java
/*...*/
public final class ExceptionUtil {

    public static final String TIPO_DESCONHECIDO = \"tipo desconhecido\";
    public static final String VALOR_NAO_INFORMADO = \"valor não informado\";

    private ExceptionUtil() {
        /*...*/
    }

    public static ProblemDetails getProblemDetails(HttpServletRequest request, Exception ex) {
        /*...*/
    }

    private static ProblemDetails handleMethodArgumentTypeMismatch(MethodArgumentTypeMismatchException ex, HttpServletRequest request) {
        /*...*/
    }

    private static ProblemDetails handleMissingServletRequestParameter(MissingServletRequestParameterException ex, HttpServletRequest request) {
        /*...*/
    }

    private static ProblemDetails handleDataIntegrityViolation(HttpServletRequest request) {
        /*...*/
    }

    private static ProblemDetails handleMethodArgumentNotValid(MethodArgumentNotValidException ex, HttpServletRequest request) {
        /*...*/
    }

    private static ProblemDetails handleConversionFailed(ConversionFailedException ex, HttpServletRequest request) {
        /*...*/
    }
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/service/EventService.java` starting at line 48:
```java
/*...*/
@Service
@Slf4j
@RequiredArgsConstructor
public class EventService {
    /*...*/
    public Event createEvent(EventRequestDTO data) {
        String imgUrl = \"\";


        if (data.image() != null) {
            imgUrl = this.uploadImg(data.image());
        }
        Event newEvent = mapper.toEntity(data, imgUrl);
        repository.save(newEvent);

        if (Boolean.FALSE.equals(data.remote())) {
            this.addressService.createAddress(data, newEvent);
        }

        return newEvent;
    }
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/utils/ExceptionUtil.java` starting at line 0:
```java
package com.eventostec.api.utils;

import com.eventostec.api.exceptions.config.ProblemDetails;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.core.convert.ConversionFailedException;
import org.springframework.http.HttpStatus;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;

import java.util.Optional;

public final class ExceptionUtil {
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/domain/event/EventAddressProjection.java` starting at line 0:
```java
package com.eventostec.api.domain.event;

import java.util.Date;
import java.util.UUID;

public interface EventAddressProjection {
    UUID getId();
    String getTitle();
    String getDescription();
    Date getDate();
    String getImgUrl();
    String getEventUrl();
    Boolean getRemote();
    String getCity();
    String getUf();
}
```

Here is a potentially relevant text excerpt in `src/test/java/com/eventostec/api/service/EventServiceTest.java` starting at line 0:
```java
package com.eventostec.api.service;

import com.eventostec.api.domain.event.*;
import com.eventostec.api.repositories.EventRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.multipart.MultipartFile;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3Utilities;
import software.amazon.awssdk.services.s3.model.GetUrlRequest;

import java.net.URI;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class EventServiceTest {
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/repositories/EventRepository.java` starting at line 25:
```java
/*...*/
public interface EventRepository extends JpaRepository<Event, UUID> {
    /*...*/
            \"AND (e.date >= :startDate AND e.date <= :endDate)\")
    Page<EventAddressProjection> findFilteredEvents(@Param(\"city\") String city,
                                                    @Param(\"uf\") String uf,
                                                    @Param(\"startDate\") Date startDate,
                                                    @Param(\"endDate\") Date endDate,
                                                    Pageable pageable);

    @Query(\"SELECT e.id AS id, e.title AS title, e.description AS description, e.date AS date, e.imgUrl AS imgUrl, e.eventUrl AS eventUrl, e.remote AS remote, a.city AS city, a.uf AS uf \" +
            \"FROM Event e JOIN Address a ON e.id = a.event.id \" +
            \"WHERE (:title = '' OR e.title LIKE %:title%)\")
    List<EventAddressProjection> findEventsByTitle(@Param(\"title\") String title);
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/service/EventService.java` starting at line 82:
```java
/*...*/
@Service
@Slf4j
@RequiredArgsConstructor
public class EventService {
    /*...*/
    public EventDetailsDTO getEventDetails(UUID eventId) {
        Event event = repository.findById(eventId)
                .orElseThrow(() -> new IllegalArgumentException(\"Event not found\"));

        Optional<Address> address = addressService.findByEventId(eventId);

        List<Coupon> coupons = couponService.consultCoupons(eventId, new Date());

        List<EventDetailsDTO.CouponDTO> couponDTOs = coupons.stream()
                .map(coupon -> new EventDetailsDTO.CouponDTO(
                        coupon.getCode(),
                        coupon.getDiscount(),
                        coupon.getValid()))
                .collect(Collectors.toList());

        return new EventDetailsDTO(
                event.getId(),
                event.getTitle(),
                event.getDescription(),
                event.getDate(),
                address.isPresent() ? address.get().getCity() : \"\",
                address.isPresent() ? address.get().getUf() : \"\",
                event.getImgUrl(),
                event.getEventUrl(),
                couponDTOs);
    }
    /*...*/
}
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 129:
```
...
[ -z \"${MVNW_REPOURL-}\" ] || distributionUrl=\"$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*\"$_MVNW_REPO_PATTERN\"}\"
distributionUrlName=\"${distributionUrl##*/}\"
distributionUrlNameMain=\"${distributionUrlName%.*}\"
distributionUrlNameMain=\"${distributionUrlNameMain%-bin}\"
MAVEN_HOME=\"$HOME/.m2/wrapper/dists/${distributionUrlNameMain-}/$(hash_string \"$distributionUrl\")\"

exec_maven() {
  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
  exec \"$MAVEN_HOME/bin/$MVN_CMD\" \"$@\" || die \"cannot exec $MAVEN_HOME/bin/$MVN_CMD\"
}

if [ -d \"$MAVEN_HOME\" ]; then
  verbose \"found existing MAVEN_HOME at $MAVEN_HOME\"
  exec_maven \"$@\"
fi

case \"${distributionUrl-}\" in
*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
...
```

Here is a potentially relevant text excerpt in `target/generated-sources/annotations/com/eventostec/api/mappers/EventMapperImpl.java` starting at line 18:
```java
/*...*/
@Generated(
    value = \"org.mapstruct.ap.MappingProcessor\",
    date = \"2025-02-18T16:36:11+0800\",
    comments = \"version: 1.4.2.Final, compiler: Eclipse JDT (IDE) 3.41.0.z20250115-2156, environment: Java 21.0.5 (Eclipse Adoptium)\"
)
@Component
public class EventMapperImpl implements EventMapper {

    @Override
    public Event toEntity(EventRequestDTO dto, String imgUrl) {
        if ( dto == null && imgUrl == null ) {
            return null;
        }

        Event event = new Event();

        if ( dto != null ) {
            event.setTitle( dto.title() );
            event.setDescription( dto.description() );
            event.setEventUrl( dto.eventUrl() );
            event.setDate( epochToDate( dto.date() ) );
            event.setRemote( dto.remote() );
        }
        if ( imgUrl != null ) {
            /*...*/
    }
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/mappers/EventMapper.java` starting at line 0:
```java
package com.eventostec.api.mappers;

import com.eventostec.api.domain.event.Event;
import com.eventostec.api.domain.event.EventRequestDTO;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Mappings;
import org.mapstruct.Named;

import java.util.Date;

@Mapper(componentModel = \"spring\")
public interface EventMapper {
    /*...*/
}
```

Here is a potentially relevant text excerpt in `target/generated-sources/annotations/com/eventostec/api/mappers/EventMapperImpl.java` starting at line 40:
```java
/*...*/
@Generated(
    value = \"org.mapstruct.ap.MappingProcessor\",
    date = \"2025-02-18T16:36:11+0800\",
    comments = \"version: 1.4.2.Final, compiler: Eclipse JDT (IDE) 3.41.0.z20250115-2156, environment: Java 21.0.5 (Eclipse Adoptium)\"
)
@Component
public class EventMapperImpl implements EventMapper {
    /*...*/
    @Override
    public EventRequestDTO toDto(Event entity) {
        if ( entity == null ) {
            return null;
        }

        String title = null;
        String description = null;
        String eventUrl = null;
        Long date = null;
        Boolean remote = null;

        title = entity.getTitle();
        description = entity.getDescription();
        eventUrl = entity.getEventUrl();
        date = dateToEpoch( entity.getDate() );
        remote = entity.getRemote();

        String city = null;
        String state = null;
        /*...*/
    }
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/domain/event/Event.java` starting at line 0:
```java
package com.eventostec.api.domain.event;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Date;
import java.util.UUID;

@Table(name = \"event\")
@Entity
@Setter
@Getter
@NoArgsConstructor
@AllArgsConstructor
public class Event {
    @Id
    @GeneratedValue
    private UUID id;

    private String title;
    private String description;
    private String imgUrl;
    private String eventUrl;
    private Boolean remote;
    private Date date;
}
```

Here is a potentially relevant text excerpt in `target/generated-sources/annotations/com/eventostec/api/mappers/EventMapperImpl.java` starting at line 16:
```java
/*...*/
@Generated(
    value = \"org.mapstruct.ap.MappingProcessor\",
    date = \"2025-02-18T16:36:11+0800\",
    comments = \"version: 1.4.2.Final, compiler: Eclipse JDT (IDE) 3.41.0.z20250115-2156, environment: Java 21.0.5 (Eclipse Adoptium)\"
)
@Component
public class EventMapperImpl implements EventMapper {

    @Override
    public Event toEntity(EventRequestDTO dto, String imgUrl) {
        /*...*/
    }

    @Override
    public EventRequestDTO toDto(Event entity) {
        /*...*/
    }
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/service/AddressService.java` starting at line 0:
```java
package com.eventostec.api.service;

import com.eventostec.api.domain.address.Address;
import com.eventostec.api.domain.event.Event;
import com.eventostec.api.domain.event.EventRequestDTO;
import com.eventostec.api.repositories.AddressRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class AddressService {

    private final AddressRepository addressRepository;

    public Address createAddress(EventRequestDTO data, Event event) {
        Address address = new Address();
        address.setCity(data.city());
        address.setUf(data.state());
        address.setEvent(event);
        return addressRepository.save(address);
    }

    public Optional<Address> findByEventId(UUID eventId) {
        return addressRepository.findByEventId(eventId);
    }
}
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 26:
```
...
#   MVNW_REPOURL - repo url base for downloading maven distribution
#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
# ----------------------------------------------------------------------------

set -euf
[ \"${MVNW_VERBOSE-}\" != debug ] || set -x

# OS specific support.
native_path() { printf %s\\\
 \"$1\"; }
case \"$(uname)\" in
CYGWIN* | MINGW*)
  [ -z \"${JAVA_HOME-}\" ] || JAVA_HOME=\"$(cygpath --unix \"$JAVA_HOME\")\"
  native_path() { cygpath --path --windows \"$1\"; }
  ;;
esac

# set JAVACMD and JAVACCMD
set_java_home() {
  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
  if [ -n \"${JAVA_HOME-}\" ]; then
    if [ -x \"$JAVA_HOME/jre/sh/java\" ]; then
...
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/repositories/AddressRepository.java` starting at line 0:
```java
package com.eventostec.api.repositories;

import com.eventostec.api.domain.address.Address;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;
import java.util.UUID;

public interface AddressRepository extends JpaRepository <Address, UUID> {
    public Optional<Address> findByEventId(UUID eventId);
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/service/EventService.java` starting at line 34:
```java
/*...*/
@Service
@Slf4j
@RequiredArgsConstructor
public class EventService {

    @Value(\"${aws.bucket.name}\")
    private String bucketName;

    @Value(\"${admin.key}\")
    private String adminKey;

    private final S3Client s3Client;
    private final AddressService addressService;
    private final CouponService couponService;
    private final EventRepository repository;

    @Autowired
    private EventMapper mapper;

    public Event createEvent(EventRequestDTO data) {
        /*...*/
    }

    public List<EventResponseDTO> getUpcomingEvents(int page, int size) {
        /*...*/
    }

    public EventDetailsDTO getEventDetails(UUID eventId) {
        /*...*/
    }

    public void deleteEvent(UUID eventId, String adminKey){
        /*...*/
    }

    public List<EventResponseDTO> searchEvents(String title){
        /*...*/
    }

    public List<EventResponseDTO> getFilteredEvents(int page, int size, String city, String uf, Date startDate, Date endDate){
        /*...*/
    }

    private String uploadImg(MultipartFile multipartFile) {
        /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/domain/coupon/CouponRequestDTO.java` starting at line 0:
```java
package com.eventostec.api.domain.coupon;

public record CouponRequestDTO(String code, Integer discount, Long valid) {
}
```

Here is the full text of `target/generated-sources/annotations/com/eventostec/api/mappers/EventMapperImpl.java`:
```java
package com.eventostec.api.mappers;

import com.eventostec.api.domain.event.Event;
import com.eventostec.api.domain.event.EventRequestDTO;
import javax.annotation.processing.Generated;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

@Generated(
    value = \"org.mapstruct.ap.MappingProcessor\",
    date = \"2025-02-18T16:36:11+0800\",
    comments = \"version: 1.4.2.Final, compiler: Eclipse JDT (IDE) 3.41.0.z20250115-2156, environment: Java 21.0.5 (Eclipse Adoptium)\"
)
@Component
public class EventMapperImpl implements EventMapper {
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/mappers/EventMapper.java` starting at line 31:
```java
/*...*/
@Mapper(componentModel = \"spring\")
public interface EventMapper {
    /*...*/
        })
        EventRequestDTO toDto(Event entity);

    @Named(\"epochToDate\")
    default Date epochToDate(Long timestamp) {
        /*...*/
    }

    @Named(\"dateToEpoch\")
    default Long dateToEpoch(Date date) {
        /*...*/
    }
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/controller/EventController.java` starting at line 0:
```java
package com.eventostec.api.controller;

import com.eventostec.api.domain.event.Event;
import com.eventostec.api.domain.event.EventDetailsDTO;
import com.eventostec.api.domain.event.EventRequestDTO;
import com.eventostec.api.domain.event.EventResponseDTO;
import com.eventostec.api.service.EventService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Date;
import java.util.List;
import java.util.UUID;

@RestController
@RequiredArgsConstructor
@RequestMapping(\"/api/event\")
public class EventController {
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/exceptions/config/ProblemDetails.java` starting at line 0:
```java
package com.eventostec.api.exceptions.config;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Based on RFC7807(<a href=\"https://datatracker.ietf.org/doc/html/rfc7807\">Problem Details for HTTP APIs</a>)
 */
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class ProblemDetails {
    private String title;
    private Integer code;
    private String status;
    private String detail;
    private String instance;
}
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 114:
```
...
  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
  *)
    echo \"Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version\" >&2
    distributionPlatform=linux-amd64
    ;;
  esac
  distributionUrl=\"${distributionUrl%-bin.*}-$distributionPlatform.zip\"
  ;;
maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
*) MVN_CMD=\"mvn${0##*/mvnw}\" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
esac

# apply MVNW_REPOURL and calculate MAVEN_HOME
# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
...
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/mappers/EventMapper.java` starting at line 14:
```java
/*...*/
@Mapper(componentModel = \"spring\")
public interface EventMapper {

        @Mappings({
                @Mapping(target = \"id\", ignore = true),
                @Mapping(source = \"dto.title\", target = \"title\"),
                @Mapping(source = \"dto.description\", target = \"description\"),
                @Mapping(target = \"imgUrl\", source = \"imgUrl\"),
                @Mapping(source = \"dto.eventUrl\", target = \"eventUrl\"),
                @Mapping(source = \"dto.date\", target = \"date\", qualifiedByName = \"epochToDate\"),
                @Mapping(source = \"dto.remote\", target = \"remote\"),
        })
        Event toEntity(EventRequestDTO dto, String imgUrl);

        @Mappings({
                @Mapping(source = \"entity.title\", target = \"title\"),
                @Mapping(source = \"entity.description\", target = \"description\"),
                @Mapping(source = \"entity.eventUrl\", target = \"eventUrl\"),
                @Mapping(source = \"entity.date\", target = \"date\", qualifiedByName = \"dateToEpoch\"),
                @Mapping(source = \"entity.remote\", target = \"remote\"),
                /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/domain/event/EventDetailsDTO.java` starting at line 0:
```java
package com.eventostec.api.domain.event;

import java.util.Date;
import java.util.List;
import java.util.UUID;

public record EventDetailsDTO(
        UUID id,
        String title,
        String description,
        Date date,
        String city,
        String state,
        String imgUrl,
        String eventUrl,
        List<CouponDTO> coupons) {

    public record CouponDTO(
            String code,
            Integer discount,
            Date valid) {
    }
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/domain/coupon/Coupon.java` starting at line 0:
```java
package com.eventostec.api.domain.coupon;

import com.eventostec.api.domain.event.Event;
import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Date;
import java.util.UUID;

@Entity
@Table(name = \"coupon\")
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class Coupon {
    @Id
    @GeneratedValue
    private UUID id;

    private String code;
    private Integer discount;
    private Date valid;

    @ManyToOne
    @JoinColumn(name = \"event_id\")
    private Event event;
}
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 0:
```
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \"License\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Apache Maven Wrapper startup batch script, version 3.3.1
#
# Optional ENV vars
# -----------------
#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
...
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/service/CouponService.java` starting at line 0:
```java
package com.eventostec.api.service;

import com.eventostec.api.domain.coupon.Coupon;
import com.eventostec.api.domain.coupon.CouponRequestDTO;
import com.eventostec.api.domain.event.Event;
import com.eventostec.api.repositories.CouponRepository;
import com.eventostec.api.repositories.EventRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class CouponService {
    /*...*/
}
```

Here is the full text of `src/main/java/com/eventostec/api/config/AWSConfig.java`:
```java
package com.eventostec.api.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import software.amazon.awssdk.auth.credentials.AwsBasicCredentials;
import software.amazon.awssdk.auth.credentials.StaticCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.S3ClientBuilder;

@Configuration
public class AWSConfig {
    /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/service/CouponService.java` starting at line 14:
```java
/*...*/
@Service
@RequiredArgsConstructor
public class CouponService {

    private final CouponRepository couponRepository;
    private final EventRepository eventRepository;

    public Coupon addCouponToEvent(UUID eventId, CouponRequestDTO couponData) {
        Event event = eventRepository.findById(eventId)
                .orElseThrow(() -> new IllegalArgumentException(\"Event not found\"));

        Coupon coupon = new Coupon();
        coupon.setCode(couponData.code());
        coupon.setDiscount(couponData.discount());
        coupon.setValid(new Date(couponData.valid()));
        coupon.setEvent(event);

        return couponRepository.save(coupon);
    }

    public List<Coupon> consultCoupons(UUID eventId, Date currentDate) {
        return couponRepository.findByEventIdAndValidAfter(eventId, currentDate);
    }
}
```

Here is a potentially relevant text excerpt in `.mvn/wrapper/maven-wrapper.properties` starting at line 0:
```properties
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# \"License\"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
wrapperVersion=3.3.1
distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.6/apache-maven-3.9.6-bin.zip
```

Here is a potentially relevant text excerpt in `mvnw` starting at line 99:
```
...
# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
while IFS=\"=\" read -r key value; do
  case \"${key-}\" in
  distributionUrl) distributionUrl=\"${value-}\" ;;
  distributionSha256Sum) distributionSha256Sum=\"${value-}\" ;;
  esac
done <\"${0%/*}/.mvn/wrapper/maven-wrapper.properties\"
[ -n \"${distributionUrl-}\" ] || die \"cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties\"

case \"${distributionUrl##*/}\" in
maven-mvnd-*bin.*)
  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
  case \"${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)\" in
  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
...
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/service/EventService.java` starting at line 178:
```java
/*...*/
@Service
@Slf4j
@RequiredArgsConstructor
public class EventService {
    /*...*/
    }

}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/repositories/EventRepository.java` starting at line 16:
```java
/*...*/
public interface EventRepository extends JpaRepository<Event, UUID> {

    @Query(\"SELECT e.id AS id, e.title AS title, e.description AS description, e.date AS date, e.imgUrl AS imgUrl, e.eventUrl AS eventUrl, e.remote AS remote, a.city AS city, a.uf AS uf \" +
            \"FROM Event e LEFT JOIN Address a ON e.id = a.event.id \" +
            \"WHERE e.date >= :currentDate\")
    public Page<EventAddressProjection> findUpcomingEvents(@Param(\"currentDate\") Date currentDate, Pageable pageable);

    @Query(\"SELECT e.id AS id, e.title AS title, e.description AS description, e.date AS date, e.imgUrl AS imgUrl, e.eventUrl AS eventUrl, e.remote AS remote, a.city AS city, a.uf AS uf \" +
            \"FROM Event e JOIN Address a ON e.id = a.event.id \" +
            \"WHERE (:city = '' OR a.city LIKE %:city%) \" +
            \"AND (:uf = '' OR a.uf LIKE %:uf%) \" +
            /*...*/
}
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/service/EventService.java` starting at line 0:
```java
package com.eventostec.api.service;

import com.eventostec.api.domain.address.Address;
import com.eventostec.api.domain.coupon.Coupon;
import com.eventostec.api.domain.event.*;
import com.eventostec.api.mappers.EventMapper;
import com.eventostec.api.repositories.EventRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.multipart.MultipartFile;
import software.amazon.awssdk.core.sync.RequestBody;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.GetUrlRequest;
import software.amazon.awssdk.services.s3.model.PutObjectRequest;


import java.nio.ByteBuffer;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@Slf4j
@RequiredArgsConstructor
public class EventService {
    /*...*/
```

Here is the full text of `target/classes/application.properties`:
```properties
spring.application.name=api
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost/eventostec}
spring.datasource.username=${DB_USER:admin}
spring.datasource.password=${DB_PASSWORD:admin}
aws.region=${AWS_REGION:us-east-1}
aws.bucket.name=${AWS_BUCKET_NAME:eventostec-imagens}
admin.key=${ADMIN_KEY:admin}
aws.accessKey=
aws.secretKey=
server.port=8090
```

Here is the full text of `src/main/resources/application.properties`:
```properties
spring.application.name=api
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost/eventostec}
spring.datasource.username=${DB_USER:admin}
spring.datasource.password=${DB_PASSWORD:admin}
aws.region=${AWS_REGION:us-east-1}
aws.bucket.name=${AWS_BUCKET_NAME:eventostec-imagens}
admin.key=${ADMIN_KEY:admin}
aws.accessKey=
aws.secretKey=
server.port=8090
```

Here is a potentially relevant text excerpt in `pom.xml` starting at line 0:
```xml
<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
\t\t xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">
\t<modelVersion>4.0.0</modelVersion>
\t<parent>
\t\t<groupId>org.springframework.boot</groupId>
\t\t<artifactId>spring-boot-starter-parent</artifactId>
\t\t<version>3.3.4</version>
\t\t<relativePath/>
\t</parent>
\t<groupId>com.eventostec</groupId>
\t<artifactId>api</artifactId>
\t<version>0.0.1-SNAPSHOT</version>
\t<name>api</name>
\t<description>Backend for eventos tec</description>
\t<properties>
\t\t<java.version>21</java.version>
...
```

Here is a potentially relevant text excerpt in `src/main/java/com/eventostec/api/repositories/EventRepository.java` starting at line 0:
```java
package com.eventostec.api.repositories;

import com.eventostec.api.domain.event.Event;
import com.eventostec.api.domain.event.EventAddressProjection;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.Date;
import java.util.List;
import java.util.UUID;

public interface EventRepository extends JpaRepository<Event, UUID> {
    /*...*/
}
```

Here is a potentially relevant text excerpt in `pom.xml` starting at line 106:
```xml
...
\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>
\t\t\t\t<configuration>
\t\t\t\t\t<excludes>
\t\t\t\t\t\t<exclude>
\t\t\t\t\t\t\t<groupId>org.projectlombok</groupId>
\t\t\t\t\t\t\t<artifactId>lombok</artifactId>
\t\t\t\t\t\t</exclude>
\t\t\t\t\t</excludes>
\t\t\t\t</configuration>
\t\t\t</plugin>
\t\t\t<plugin>
\t\t\t\t<groupId>org.jacoco</groupId>
\t\t\t\t<artifactId>jacoco-maven-plugin</artifactId>
\t\t\t\t<version>0.8.11</version>
\t\t\t\t<executions>
\t\t\t\t\t<execution>
\t\t\t\t\t\t<goals>
\t\t\t\t\t\t\t<goal>prepare-agent</goal>
\t\t\t\t\t\t</goals>
\t\t\t\t\t</execution>
\t\t\t\t\t<execution>
\t\t\t\t\t\t<id>report</id>
\t\t\t\t\t\t<phase>verify</phase>
\t\t\t\t\t\t<goals>
\t\t\t\t\t\t\t<goal>report</goal>
\t\t\t\t\t\t</goals>
\t\t\t\t\t</execution>
\t\t\t\t</executions>
\t\t\t\t<configuration>
\t\t\t\t\t<outputDirectory>${project.build.directory}/site/jacoco</outputDirectory>
\t\t\t\t</configuration>
\t\t\t</plugin>
\t\t</plugins>
\t</build>
</project>
```

Here is a potentially relevant text excerpt in `src/test/resources/application-test.properties` starting at line 0:
```properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.flyway.enabled=false
```

Here is the full text of `target/test-classes/application-test.properties`:
```properties
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.flyway.enabled=false
```

Here is a potentially relevant text excerpt in `pom.xml` starting at line 74:
```xml
...
\t\t<dependency>
\t\t\t<groupId>software.amazon.awssdk</groupId>
\t\t\t<artifactId>s3</artifactId>
\t\t\t<version>2.26.7</version>
\t\t</dependency>
\t\t<dependency>
\t\t\t<groupId>org.mapstruct</groupId>
\t\t\t<artifactId>mapstruct</artifactId>
\t\t\t<version>${mapstruct.version}</version>
\t\t</dependency>
\t</dependencies>

\t<build>
\t\t<plugins>
\t\t\t<plugin>
\t\t\t\t<groupId>org.apache.maven.plugins</groupId>
\t\t\t\t<artifactId>maven-compiler-plugin</artifactId>
\t\t\t\t<version>3.13.0</version>
\t\t\t\t<configuration>
\t\t\t\t\t<source>21</source>
\t\t\t\t\t<target>21</target>
\t\t\t\t\t<annotationProcessorPaths>
\t\t\t\t\t\t<path>
\t\t\t\t\t\t\t<groupId>org.mapstruct</groupId>
\t\t\t\t\t\t\t<artifactId>mapstruct-processor</artifactId>
\t\t\t\t\t\t\t<version>${mapstruct.version}</version>
\t\t\t\t\t\t</path>
\t\t\t\t\t</annotationProcessorPaths>
\t\t\t\t</configuration>
\t\t\t</plugin>
\t\t\t<plugin>
\t\t\t\t<groupId>org.springframework.boot</groupId>
...
```

Here is a potentially relevant text excerpt in `pom.xml` starting at line 17:
```xml
...
\t\t<mapstruct.version>1.4.2.Final</mapstruct.version>
\t\t<mapstruct-lombok.version>0.2.0</mapstruct-lombok.version>
\t</properties>
\t<dependencies>
\t\t<dependency>
\t\t\t<groupId>org.springframework.boot</groupId>
\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>
\t\t</dependency>
\t\t<dependency>
\t\t\t<groupId>org.springframework.boot</groupId>
\t\t\t<artifactId>spring-boot-starter-web</artifactId>
\t\t</dependency>
\t\t<dependency>
\t\t\t<groupId>org.springframework.boot</groupId>
\t\t\t<artifactId>spring-boot-starter-validation</artifactId>
\t\t</dependency>
\t\t<dependency>
\t\t\t<groupId>org.springframework.boot</groupId>
\t\t\t<artifactId>spring-boot-devtools</artifactId>
\t\t\t<scope>runtime</scope>
\t\t\t<optional>true</optional>
\t\t</dependency>
\t\t<dependency>
\t\t\t<groupId>org.postgresql</groupId>
\t\t\t<artifactId>postgresql</artifactId>
\t\t\t<scope>runtime</scope>
\t\t</dependency>
\t\t<dependency>
...
```

Here is a potentially relevant text excerpt in `pom.xml` starting at line 45:
```xml
...
\t\t\t<groupId>org.projectlombok</groupId>
\t\t\t<artifactId>lombok</artifactId>
\t\t\t<optional>true</optional>
\t\t</dependency>
\t\t<dependency>
\t\t\t<groupId>org.springframework.boot</groupId>
\t\t\t<artifactId>spring-boot-starter-test</artifactId>
\t\t\t<scope>test</scope>
\t\t</dependency>
\t\t<dependency>
\t\t\t<groupId>org.flywaydb</groupId>
\t\t\t<artifactId>flyway-core</artifactId>
\t\t\t<version>9.8.1</version>
\t\t</dependency>
\t\t<dependency>
\t\t\t<groupId>com.h2database</groupId>
\t\t\t<artifactId>h2</artifactId>
\t\t\t<scope>test</scope>
\t\t</dependency>
\t\t<dependency>
\t\t\t<groupId>org.mockito</groupId>
\t\t\t<artifactId>mockito-core</artifactId>
\t\t\t<scope>test</scope>
\t\t</dependency>
\t\t<dependency>
\t\t\t<groupId>org.mockito</groupId>
\t\t\t<artifactId>mockito-junit-jupiter</artifactId>
\t\t\t<scope>test</scope>
\t\t</dependency>
...
```